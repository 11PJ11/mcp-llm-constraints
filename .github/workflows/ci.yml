name: Improved CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  CONFIGURATION: Release

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            rid: linux-x64
            artifact-name: constraint-mcp-linux-x64
          - os: windows-latest
            rid: win-x64
            artifact-name: constraint-mcp-win-x64
          - os: macos-latest
            rid: osx-x64
            artifact-name: constraint-mcp-osx-x64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Build ALL projects explicitly (Solution File Deception prevention)
      run: |
        echo "üîç Building ALL projects to ensure no compilation errors..."
        dotnet build src/ConstraintMcpServer/ConstraintMcpServer.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal
        dotnet build tests/ConstraintMcpServer.Tests/ConstraintMcpServer.Tests.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal
        dotnet build tests/ConstraintMcpServer.Performance/ConstraintMcpServer.Performance.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal
        
    - name: Run ALL tests explicitly (Solution File Deception prevention)
      run: |
        echo "üß™ Running ALL test projects..."
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "üçé macOS: Excluding both RateLimitSensitive and MacOSPerformance tests"
          dotnet test tests/ConstraintMcpServer.Tests/ConstraintMcpServer.Tests.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal --filter "Category!=RateLimitSensitive&Category!=MacOSPerformance"
        else
          echo "üñ•Ô∏è  Non-macOS: Excluding only RateLimitSensitive tests"
          dotnet test tests/ConstraintMcpServer.Tests/ConstraintMcpServer.Tests.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal --filter "Category!=RateLimitSensitive"
        fi
        dotnet test tests/ConstraintMcpServer.Performance/ConstraintMcpServer.Performance.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal
        
    - name: Publish self-contained executable
      run: dotnet publish src/ConstraintMcpServer/ConstraintMcpServer.csproj --configuration ${{ env.CONFIGURATION }} --runtime ${{ matrix.rid }} --self-contained true -p:PublishSingleFile=true -p:EnableCompressionInSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true --output publish/${{ matrix.rid }}
          
    - name: Copy configuration files
      shell: bash
      run: |
        mkdir -p publish/${{ matrix.rid }}/config
        if [ -d "config" ] && [ "$(ls -A config)" ]; then
          cp -r config/* publish/${{ matrix.rid }}/config/
          echo "‚úÖ Configuration files copied successfully"
        else
          echo "‚ö†Ô∏è No configuration files found to copy"
        fi
        
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd publish/${{ matrix.rid }}
        tar -czf ../${{ matrix.artifact-name }}.tar.gz .
        cd ..
        ls -lh ${{ matrix.artifact-name }}.tar.gz
        echo "‚úÖ Archive created: $(du -h ${{ matrix.artifact-name }}.tar.gz | cut -f1)"
        
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd publish/${{ matrix.rid }}
        Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact-name }}.zip -Force
        cd ..
        $size = (Get-Item ${{ matrix.artifact-name }}.zip).Length / 1MB
        Write-Host "‚úÖ Archive created: $([Math]::Round($size, 2)) MB"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: publish/${{ matrix.artifact-name }}.*
        retention-days: 30

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Run enhanced quality gates
      run: |
        echo "üîç Running enhanced quality gates that prevent Solution File Deception..."
        dotnet build src/ConstraintMcpServer/ConstraintMcpServer.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal /warnaserror
        dotnet build tests/ConstraintMcpServer.Tests/ConstraintMcpServer.Tests.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal /warnaserror
        dotnet build tests/ConstraintMcpServer.Performance/ConstraintMcpServer.Performance.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal /warnaserror
        
    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
        
    - name: Run comprehensive tests
      run: |
        echo "üß™ Running comprehensive test validation..."
        echo "üñ•Ô∏è  Ubuntu: Excluding only RateLimitSensitive tests"
        dotnet test tests/ConstraintMcpServer.Tests/ConstraintMcpServer.Tests.csproj --configuration ${{ env.CONFIGURATION }} --logger "console;verbosity=minimal" --filter "Category!=RateLimitSensitive"
        dotnet test tests/ConstraintMcpServer.Performance/ConstraintMcpServer.Performance.csproj --configuration ${{ env.CONFIGURATION }} --logger "console;verbosity=minimal"

  smoke-test:
    name: Smoke Test (${{ matrix.os }})
    needs: build-and-test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: constraint-mcp-linux-x64
            executable: ConstraintMcpServer
          - os: windows-latest
            artifact-name: constraint-mcp-win-x64
            executable: ConstraintMcpServer.exe
          - os: macos-latest
            artifact-name: constraint-mcp-osx-x64
            executable: ConstraintMcpServer
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ./smoke-test
        
    - name: Extract archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd smoke-test
        tar -xzf ${{ matrix.artifact-name }}.tar.gz
        chmod +x ${{ matrix.executable }}
        
    - name: Extract archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd smoke-test
        Expand-Archive -Path ${{ matrix.artifact-name }}.zip -DestinationPath . -Force
        
    - name: Test executable starts
      shell: bash
      run: |
        cd smoke-test
        timeout 2s ./${{ matrix.executable }} </dev/null || true
        if [ -f "${{ matrix.executable }}" ] && [ -x "${{ matrix.executable }}" ]; then
          echo "‚úÖ Executable is present and executable on ${{ matrix.os }}"
        else
          echo "‚ùå Executable not found or not executable"
          exit 1
        fi

  create-release:
    name: Create GitHub Release
    needs: [build-and-test, quality-gates, smoke-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/
        
    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ github.ref_name }}"
        
        # Generate changelog from commits since last release
        LAST_RELEASE=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_RELEASE" ] && [ "$LAST_RELEASE" != "$VERSION" ]; then
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" "$LAST_RELEASE"..HEAD)
        else
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" HEAD~10..HEAD)
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        ## Universal Constraint Reminder MCP Server ${VERSION}
        
        > Preventing LLM drift in Claude Code by continuously reinforcing user-defined development constraints
        
        ### Key Features
        - üéØ **Context-aware triggering** - Intelligent activation based on user-defined contexts
        - ‚ö° **Sub-50ms latency** - No workflow disruption during coding sessions
        - üîß **YAML constraint definitions** - Easy configuration of development rules
        - üìä **Structured logging** - NDJSON logs for offline analysis
        - üèóÔ∏è **Methodology agnostic** - Works with TDD, BDD, Clean Architecture, DDD, etc.
        - üñ•Ô∏è **Cross-platform** - Windows, Linux, and macOS support
        
        ### Installation
        1. Download the appropriate archive for your platform below
        2. Extract and run: \`./ConstraintMcpServer --help\`
        3. Configure constraints in \`config/constraints.yaml\`
        
        ### Platform Support
        - **Windows**: \`constraint-mcp-win-x64.zip\` (Windows 10+)
        - **Linux**: \`constraint-mcp-linux-x64.tar.gz\` (glibc 2.17+)
        - **macOS**: \`constraint-mcp-osx-x64.tar.gz\` (macOS 10.15+)
        
        ### What's Changed
        ${CHANGELOG}
        
        ### System Requirements
        - No additional dependencies (self-contained binaries)
        - Minimum 50MB free disk space
        - .NET 8 runtime is included
        
        ---
        
        **Full documentation**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
        **Configuration guide**: [CLAUDE.md](https://github.com/${{ github.repository }}/blob/main/CLAUDE.md)
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Universal Constraint Reminder MCP Server ${{ github.ref_name }}
        body_path: release_notes.md
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Release Summary
      run: |
        echo "üöÄ Release created successfully after all quality gates passed!"
        echo "üì¶ Version: ${{ github.ref_name }}"
        echo "üåê Assets uploaded:"
        ls -la release-assets/
        echo ""
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"