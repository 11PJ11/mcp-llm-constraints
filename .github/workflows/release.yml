name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  CONFIGURATION: Release

jobs:
  build-release:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            artifact-name: constraint-mcp-linux-x64
            archive-ext: tar.gz
          - os: windows-latest
            rid: win-x64
            artifact-name: constraint-mcp-win-x64
            archive-ext: zip
          - os: macos-latest
            rid: osx-x64
            artifact-name: constraint-mcp-osx-x64
            archive-ext: tar.gz
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Build and test before release
      run: |
        echo "🔍 Building and testing ALL projects..."
        dotnet build src/ConstraintMcpServer/ConstraintMcpServer.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal /warnaserror
        dotnet build tests/ConstraintMcpServer.Tests/ConstraintMcpServer.Tests.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal /warnaserror
        dotnet test tests/ConstraintMcpServer.Tests/ConstraintMcpServer.Tests.csproj --configuration ${{ env.CONFIGURATION }} --verbosity minimal
        
    - name: Publish self-contained release binary
      run: |
        dotnet publish src/ConstraintMcpServer/ConstraintMcpServer.csproj \
          --configuration ${{ env.CONFIGURATION }} \
          --runtime ${{ matrix.rid }} \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:EnableCompressionInSingleFile=true \
          -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:PublishTrimmed=true \
          -p:TrimMode=partial \
          --output release/${{ matrix.rid }}
          
    - name: Copy configuration and documentation
      shell: bash
      run: |
        # Copy configuration files
        mkdir -p release/${{ matrix.rid }}/config
        if [ -d "config" ] && [ "$(ls -A config)" ]; then
          cp -r config/* release/${{ matrix.rid }}/config/
          echo "✅ Configuration files copied"
        fi
        
        # Copy essential documentation
        cp README.md release/${{ matrix.rid }}/
        cp CLAUDE.md release/${{ matrix.rid }}/
        
        # Create installation instructions
        cat > release/${{ matrix.rid }}/INSTALL.md << 'EOF'
        # Installation Instructions
        
        ## Quick Start
        1. Download and extract the archive for your platform
        2. Run the executable: `./ConstraintMcpServer --help` (Unix) or `ConstraintMcpServer.exe --help` (Windows)
        3. Configure constraints in the `config/` directory
        
        ## System Requirements
        - No additional dependencies required (self-contained)
        - Minimum: 50MB free disk space
        - Supported OS: Windows 10+, Linux (glibc 2.17+), macOS 10.15+
        
        ## Configuration
        Edit `config/constraints.yaml` to define your development constraints.
        
        For detailed usage instructions, see README.md
        EOF
        
    - name: Create version info file
      shell: bash
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        cat > release/${{ matrix.rid }}/VERSION << EOF
        Version: ${VERSION}
        Platform: ${{ matrix.rid }}
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Git Commit: ${{ github.sha }}
        Repository: ${{ github.repository }}
        EOF
        
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd release/${{ matrix.rid }}
        tar -czf ../${{ matrix.artifact-name }}.tar.gz .
        cd ..
        ls -lh ${{ matrix.artifact-name }}.tar.gz
        echo "ARCHIVE_PATH=release/${{ matrix.artifact-name }}.tar.gz" >> $GITHUB_ENV
        
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd release/${{ matrix.rid }}
        Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact-name }}.zip -Force
        cd ..
        $size = (Get-Item ${{ matrix.artifact-name }}.zip).Length / 1MB
        Write-Host "✅ Archive created: $([Math]::Round($size, 2)) MB"
        echo "ARCHIVE_PATH=release/${{ matrix.artifact-name }}.zip" | Out-File -FilePath $env:GITHUB_ENV -Append
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ env.ARCHIVE_PATH }}
        retention-days: 90

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation
        
    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/
        
    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        
        # Generate changelog from commits since last release
        LAST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_RELEASE" ] && [ "$LAST_RELEASE" != "$VERSION" ]; then
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" "$LAST_RELEASE"..HEAD)
        else
          CHANGELOG=$(git log --oneline --pretty=format:"- %s" HEAD~10..HEAD)
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        ## Universal Constraint Reminder MCP Server ${VERSION}
        
        > Preventing LLM drift in Claude Code by continuously reinforcing user-defined development constraints
        
        ### Key Features
        - 🎯 **Context-aware triggering** - Intelligent activation based on user-defined contexts
        - ⚡ **Sub-50ms latency** - No workflow disruption during coding sessions
        - 🔧 **YAML constraint definitions** - Easy configuration of development rules
        - 📊 **Structured logging** - NDJSON logs for offline analysis
        - 🏗️ **Methodology agnostic** - Works with TDD, BDD, Clean Architecture, DDD, etc.
        - 🖥️ **Cross-platform** - Windows, Linux, and macOS support
        
        ### Installation
        1. Download the appropriate archive for your platform below
        2. Extract and run: \`./ConstraintMcpServer --help\`
        3. Configure constraints in \`config/constraints.yaml\`
        
        ### Platform Support
        - **Windows**: \`constraint-mcp-win-x64.zip\` (Windows 10+)
        - **Linux**: \`constraint-mcp-linux-x64.tar.gz\` (glibc 2.17+)
        - **macOS**: \`constraint-mcp-osx-x64.tar.gz\` (macOS 10.15+)
        
        ### What's Changed
        ${CHANGELOG}
        
        ### System Requirements
        - No additional dependencies (self-contained binaries)
        - Minimum 50MB free disk space
        - .NET 8 runtime is included
        
        ---
        
        **Full documentation**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
        **Configuration guide**: [CLAUDE.md](https://github.com/${{ github.repository }}/blob/main/CLAUDE.md)
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Universal Constraint Reminder MCP Server ${{ github.event.inputs.version || github.ref_name }}
        body_path: release_notes.md
        files: release-assets/*
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Release Summary
      run: |
        echo "🚀 Release created successfully!"
        echo "📦 Version: ${{ github.event.inputs.version || github.ref_name }}"
        echo "🌐 Assets uploaded:"
        ls -la release-assets/
        echo ""
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version || github.ref_name }}"