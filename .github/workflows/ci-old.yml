name: CI/CD Pipeline (DISABLED - Legacy)

# Workflow disabled to prevent conflicts with enhanced ci.yml
# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]
#   release:
#     types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: Release

jobs:
  # Build and test across multiple platforms
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 8
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            rid: linux-x64
            artifact-name: constraint-mcp-linux-x64
          - os: windows-latest
            rid: win-x64
            artifact-name: constraint-mcp-win-x64
          - os: macos-latest
            rid: osx-x64
            artifact-name: constraint-mcp-osx-x64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Verify .NET installation
      run: |
        dotnet --version
        echo "‚úÖ .NET version: $(dotnet --version)"
        echo "‚úÖ .NET installation verified on ${{ matrix.os }}"
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Cache build outputs
      uses: actions/cache@v4
      with:
        path: |
          **/bin/${{ env.CONFIGURATION }}
          **/obj/${{ env.CONFIGURATION }}
        key: ${{ runner.os }}-build-${{ env.CONFIGURATION }}-${{ hashFiles('**/*.csproj', '**/*.cs') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.CONFIGURATION }}-
          
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Build solution (parallel)
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore --verbosity minimal --maxcpucount
      
    - name: Run unit tests (fast)
      timeout-minutes: 2
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity minimal --logger "trx" --results-directory TestResults --filter "FullyQualifiedName!~E2E"
      
    - name: Run E2E tests (comprehensive validation) - default
      if: "!contains(github.event.head_commit.message, '[skip-e2e]')"
      timeout-minutes: 3
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity minimal --logger "trx" --results-directory TestResults --filter "FullyQualifiedName~E2E"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: TestResults/*.trx
        retention-days: 7
        
    - name: Publish self-contained executable
      run: dotnet publish src/ConstraintMcpServer/ConstraintMcpServer.csproj --configuration ${{ env.CONFIGURATION }} --runtime ${{ matrix.rid }} --self-contained true -p:PublishSingleFile=true -p:EnableCompressionInSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true --output publish/${{ matrix.rid }}
          
    - name: Copy configuration files
      shell: bash
      run: |
        mkdir -p publish/${{ matrix.rid }}/config
        if [ -d "config" ] && [ "$(ls -A config)" ]; then
          cp -r config/* publish/${{ matrix.rid }}/config/
          echo "‚úÖ Configuration files copied successfully"
        else
          echo "‚ö†Ô∏è No configuration files found to copy"
        fi
        
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd publish/${{ matrix.rid }}
        tar -czf ../${{ matrix.artifact-name }}.tar.gz .
        cd ..
        ls -lh ${{ matrix.artifact-name }}.tar.gz
        echo "‚úÖ Archive created: $(du -h ${{ matrix.artifact-name }}.tar.gz | cut -f1)"
        
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd publish/${{ matrix.rid }}
        Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact-name }}.zip -Force
        cd ..
        $size = (Get-Item ${{ matrix.artifact-name }}.zip).Length / 1MB
        Write-Host "‚úÖ Archive created: $([Math]::Round($size, 2)) MB"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: publish/${{ matrix.artifact-name }}.*
        retention-days: 30

  # Smoke test - verify the binary can start and respond to help
  smoke-test:
    name: Smoke Test (${{ matrix.os }})
    needs: build-and-test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: constraint-mcp-linux-x64
            executable: ConstraintMcpServer
          - os: windows-latest
            artifact-name: constraint-mcp-win-x64
            executable: ConstraintMcpServer.exe
          - os: macos-latest
            artifact-name: constraint-mcp-osx-x64
            executable: ConstraintMcpServer
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ./smoke-test
        
    - name: Extract archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd smoke-test
        tar -xzf ${{ matrix.artifact-name }}.tar.gz
        chmod +x ${{ matrix.executable }}
        
    - name: Extract archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd smoke-test
        Expand-Archive -Path ${{ matrix.artifact-name }}.zip -DestinationPath . -Force
        
    - name: Test executable starts
      shell: bash
      run: |
        cd smoke-test
        # Test that executable starts and exits gracefully (MCP server, no CLI version support)
        timeout 2s ./${{ matrix.executable }} </dev/null || true
        if [ -f "${{ matrix.executable }}" ] && [ -x "${{ matrix.executable }}" ]; then
          echo "‚úÖ Executable is present and executable on ${{ matrix.os }}"
        else
          echo "‚ùå Executable not found or not executable"
          exit 1
        fi

  # Code quality and security analysis
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore .NET tools
      run: dotnet tool restore
      
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      
    - name: Run static analysis
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --verbosity minimal /warnaserror
      
    - name: Run property-based tests
      timeout-minutes: 2
      run: |
        echo "üß™ Running property-based tests for business invariants..."
        dotnet test tests/ConstraintMcpServer.Tests --configuration ${{ env.CONFIGURATION }} --logger "console;verbosity=minimal" --filter "Category=Property"
      
    - name: Run unit tests (fast)
      timeout-minutes: 2
      run: |
        echo "üß™ Running unit tests for fast feedback..."
        dotnet test tests/ConstraintMcpServer.Tests --configuration ${{ env.CONFIGURATION }} --logger "console;verbosity=minimal" --filter "FullyQualifiedName!~E2E"
        echo "‚úÖ Unit tests completed"
        
    - name: Run E2E tests (comprehensive validation) - default
      if: "!contains(github.event.head_commit.message, '[skip-e2e]')"
      timeout-minutes: 3
      run: |
        echo "üß™ Running E2E tests for comprehensive validation..."
        dotnet test tests/ConstraintMcpServer.Tests --configuration ${{ env.CONFIGURATION }} --logger "console;verbosity=minimal" --filter "FullyQualifiedName~E2E"
        echo "‚úÖ E2E tests completed"
        echo "‚ÑπÔ∏è Mutation testing available locally via: ./scripts/run-mutation-tests.sh"

  # Create GitHub release for tagged versions
  release:
    name: Create Release
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build-and-test, smoke-test, quality-gates]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-assets
        
    - name: Upload release assets
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const assetsDir = './release-assets';
          const assets = [
            'constraint-mcp-linux-x64.tar.gz',
            'constraint-mcp-win-x64.zip', 
            'constraint-mcp-osx-x64.tar.gz'
          ];
          
          for (const asset of assets) {
            const assetPath = path.join(assetsDir, asset.split('-').slice(0,3).join('-'), asset);
            if (fs.existsSync(assetPath)) {
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                name: asset,
                data: fs.readFileSync(assetPath)
              });
              console.log(`‚úÖ Uploaded ${asset}`);
            }
          }

  # Performance budgets (placeholder for Step 6)
  performance-budget:
    name: Performance Budget
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 5
    
    steps:
    - name: Performance budget placeholder
      run: |
        echo "‚ö° Performance testing (p95 < 50ms) will be implemented in Step 6"
        echo "‚ÑπÔ∏è Current focus: Walking skeleton establishment"
        echo "‚úÖ Pipeline validates basic functionality across all platforms"