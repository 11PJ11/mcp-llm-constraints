# Universal Constraint Reminder MCP Server - Sample Configuration
# This demonstrates the methodology-agnostic YAML configuration format
# Users can adapt this template for any methodology or practice

version: "0.2.0"

# Sample constraints using generic, user-customizable approach
# Replace these examples with constraints for your chosen methodology
constraints:
  - id: practice.primary-principle
    title: "Follow your primary development principle"
    priority: 0.92
    workflow_contexts: ["session-start", "development-phase", "review-phase"]
    reminders:
      - "Apply your chosen development principle consistently."
      - "Consider the core practices of your methodology."
      
  - id: architecture.separation-principle
    title: "Maintain proper separation of concerns"
    priority: 0.88
    workflow_contexts: ["development-phase", "design-phase", "refactoring-phase"]
    reminders:
      - "Keep concerns properly separated according to your architecture."
      - "Use appropriate abstractions to define boundaries."

  - id: quality.simplicity-principle
    title: "Keep it simple and focused"
    priority: 0.75
    workflow_contexts: ["implementation-phase", "optimization-phase"]
    reminders:
      - "Implement only what's needed right now."
      - "Avoid unnecessary complexity and over-engineering."

# Scheduling configuration for user-defined workflows
schedule:
  injectionPoints: ["session-start", "pre-tool-call", "session-end"]
  cadence:
    everyNInteractions: 5  # Research-backed optimal attention retention
    contextOverrides: 
      "session-start": 1  # Higher frequency at session start
      "development-phase": 2  # More reminders during active development
  anchors:
    prologue:
      - "Remember your chosen principles and practices."
    epilogue:
      - "Before finishing: Does this align with your methodology?"

# Customization Guide:
# 1. Replace constraint IDs with your methodology-specific identifiers
# 2. Update workflow_contexts to match your team's workflow phases
# 3. Customize reminders to reflect your specific practices and principles
# 4. Adjust priorities based on your methodology's emphasis
# 5. Add additional constraints as needed for your chosen approach
#
# Example methodologies you can configure:
# - TDD: Use contexts like 'red-phase', 'green-phase', 'refactor-phase'
# - Clean Architecture: Use 'domain-layer', 'application-layer', 'infrastructure-layer'
# - Scrum: Use 'sprint-planning', 'development', 'review', 'retrospective'
# - Your Custom Methodology: Define your own contexts and constraints