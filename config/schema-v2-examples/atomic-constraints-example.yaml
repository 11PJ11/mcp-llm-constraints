# Schema v0.2.0 - Generic Atomic Constraints Template
# Demonstrates trigger-based constraint activation for any user-defined methodology
# Template that users can customize for TDD, Clean Architecture, DDD, Scrum, or any practice

version: "0.2.0"
schema_type: "atomic"
description: "Atomic constraint building blocks with trigger-based activation"

# Atomic constraints are individual, focused constraint rules that can be composed
constraints:
  # Example 1: Generic quality practice constraint (customize for your methodology)
  - id: "practice.quality-step"
    title: "Apply your quality practice step"
    type: "atomic"
    priority: 0.92
    triggers:
      # Users customize keywords for their chosen methodology
      keywords: 
        - "quality"
        - "practice" 
        - "standard"
        - "principle"
        - "methodology"
        - "guideline"
      # Users customize file patterns for their project structure
      file_patterns:
        - "*"  # Apply to all files - users can be more specific
      # Users customize context patterns for their workflow
      context_patterns:
        - "development"
        - "implementation"
        - "quality-assurance"
        - "best-practices"
        - "methodology-application"
      # Common anti-patterns that apply across methodologies
      anti_patterns:
        - "hotfix"
        - "emergency"
        - "production-issue"
        - "debugging"
      confidence_threshold: 0.7
    # Users customize reminders for their specific practice
    reminders:
      - "Apply your chosen quality practice consistently."
      - "Ensure your approach aligns with your methodology."
      - "Consider the principles and standards of your chosen approach."
    # Users customize metadata for their methodology
    metadata:
      methodology: ["user-defined"]  # Replace with your methodology
      difficulty_level: "variable"   # Adjust based on your practice
      estimated_impact: "high"

  # Example 2: Generic architectural principle constraint
  - id: "architecture.user-principle"
    title: "Follow your architectural principle"
    type: "atomic"
    priority: 0.88
    triggers:
      keywords:
        - "architecture"
        - "design"
        - "principle"
        - "structure"
        - "organization"
        - "boundary"
      file_patterns:
        - "*"  # Users customize for their project structure
      context_patterns:
        - "architectural-design"
        - "system-structure"
        - "component-design"
        - "code-organization"
        - "design-decisions"
      anti_patterns:
        - "quick-fix"
        - "temporary"
        - "hack"
      confidence_threshold: 0.6
    reminders:
      - "Apply your chosen architectural principles consistently."
      - "Consider the structural guidelines of your methodology."
      - "Ensure your design aligns with your architectural approach."
    metadata:
      methodology: ["user-defined-architecture"]
      difficulty_level: "intermediate"
      estimated_impact: "medium"

  # Example 3: Generic dependency management constraint
  - id: "dependencies.user-rule"  
    title: "Follow your dependency guidelines"
    type: "atomic"
    priority: 0.85
    triggers:
      keywords:
        - "dependency"
        - "import"
        - "using"
        - "reference"
        - "coupling"
        - "relationship"
      file_patterns:
        - "*"  # Users customize for their project structure
      context_patterns:
        - "dependency-management"
        - "code-organization"
        - "system-architecture"
        - "module-design"
        - "component-interaction"
      anti_patterns:
        - "legacy-code"
        - "migration"
      confidence_threshold: 0.75
    reminders:
      - "Follow your defined dependency management guidelines."
      - "Consider the dependency rules of your chosen architecture."
      - "Ensure dependencies align with your structural principles."
    metadata:
      methodology: ["user-defined-architecture"]
      difficulty_level: "advanced"
      estimated_impact: "high"

  # Example 4: Generic data handling constraint
  - id: "data.user-approach"
    title: "Apply your data handling approach"
    type: "atomic"
    priority: 0.75
    triggers:
      keywords:
        - "data"
        - "storage"
        - "persistence"
        - "retrieval"
        - "access"
        - "management"
      file_patterns:
        - "*"  # Users customize for their data layer structure
      context_patterns:
        - "data-handling"
        - "persistence-layer"
        - "data-access"
        - "storage-operations"
      confidence_threshold: 0.6
    reminders:
      - "Apply your chosen data handling approach consistently."
      - "Follow your methodology's guidelines for data management."
      - "Consider the data access patterns of your chosen architecture."
    metadata:
      methodology: ["user-defined-data-approach"]
      difficulty_level: "intermediate"
      estimated_impact: "medium"

  # Example 5: Generic technical practice constraint
  - id: "technical.user-practice"
    title: "Apply your technical best practice"  
    type: "atomic"
    priority: 0.70
    triggers:
      keywords:
        - "technical"
        - "practice"
        - "implementation"
        - "coding"
        - "development"
        - "technique"
      file_patterns:
        - "*"  # Users customize for their technical components
      context_patterns:
        - "technical-implementation"
        - "coding-practice"
        - "development-technique"
        - "implementation-standard"
      anti_patterns:
        - "prototype"
        - "experiment"
      confidence_threshold: 0.65
    reminders:
      - "Apply your chosen technical practices consistently."
      - "Follow your methodology's technical guidelines."
      - "Consider the implementation standards of your approach."
    metadata:
      methodology: ["user-defined-technical"]
      difficulty_level: "intermediate"
      estimated_impact: "high"

# Configuration for trigger matching engine
trigger_engine:
  # Global settings for trigger evaluation
  keyword_match_weight: 0.4      # Weight for keyword matching in relevance scoring
  file_pattern_match_weight: 0.3 # Weight for file pattern matching
  context_pattern_match_weight: 0.3 # Weight for context pattern matching
  
  # Fuzzy matching settings
  enable_fuzzy_matching: true
  fuzzy_match_threshold: 0.8     # Similarity threshold for fuzzy keyword matching
  
  # Performance settings
  max_active_constraints: 5      # Maximum constraints to activate simultaneously
  evaluation_timeout_ms: 10      # Timeout for trigger evaluation per constraint
  
  # Learning settings (basic feedback collection)
  enable_effectiveness_tracking: true
  effectiveness_decay_rate: 0.95 # How quickly old effectiveness data decays

# User customization settings
customization:
  # Template for methodology-specific workflow mapping
  workflow_context_examples:
    # Users replace these with their methodology's contexts
    generic_contexts: ["session-start", "development", "quality-check", "completion"]
    # Example mappings for popular methodologies (users choose one to implement)
    tdd_example: ["session-start", "red-phase", "green-phase", "refactor-phase"]
    clean_arch_example: ["domain-design", "application-layer", "infrastructure-layer"]
    scrum_example: ["sprint-planning", "development", "review", "retrospective"]
    custom_methodology: ["phase-1", "phase-2", "phase-3", "phase-4"]