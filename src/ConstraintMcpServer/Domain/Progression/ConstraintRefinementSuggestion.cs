using System;

namespace ConstraintMcpServer.Domain.Progression;

/// <summary>
/// Value object representing a data-driven suggestion for constraint refinement.
/// Generated by analyzing agent behavior patterns to improve constraint effectiveness.
/// </summary>
/// <param name="SuggestionId">Unique identifier for this refinement suggestion</param>
/// <param name="ConstraintId">The constraint this suggestion applies to</param>
/// <param name="RefinementType">Type of refinement being suggested</param>
/// <param name="Suggestion">Detailed description of the suggested refinement</param>
/// <param name="Rationale">Evidence-based rationale for the suggestion</param>
/// <param name="ConfidenceLevel">Confidence in the suggestion's effectiveness (0.0-1.0)</param>
/// <param name="ExpectedImpact">Expected improvement in compliance rates</param>
/// <param name="GeneratedAt">When this suggestion was generated</param>
/// <param name="BasedOnInteractions">Number of interactions this suggestion is based on</param>
public sealed record ConstraintRefinementSuggestion(
    Guid SuggestionId,
    string ConstraintId,
    string RefinementType,
    string Suggestion,
    string Rationale,
    double ConfidenceLevel,
    double ExpectedImpact,
    DateTime GeneratedAt,
    int BasedOnInteractions
)
{
    /// <summary>
    /// Validates that the suggestion has all required fields and valid ranges.
    /// </summary>
    public bool IsValid =>
        SuggestionId != Guid.Empty &&
        !string.IsNullOrWhiteSpace(ConstraintId) &&
        !string.IsNullOrWhiteSpace(RefinementType) &&
        !string.IsNullOrWhiteSpace(Suggestion) &&
        !string.IsNullOrWhiteSpace(Rationale) &&
        ConfidenceLevel is >= 0.0 and <= 1.0 &&
        ExpectedImpact is >= 0.0 and <= 1.0 &&
        GeneratedAt != default &&
        BasedOnInteractions > 0;

    /// <summary>
    /// Determines if this suggestion has high confidence (>= 0.8).
    /// </summary>
    public bool HasHighConfidence => ConfidenceLevel >= 0.8;

    /// <summary>
    /// Determines if this suggestion promises significant impact (>= 0.3).
    /// </summary>
    public bool HasSignificantImpact => ExpectedImpact >= 0.3;

    /// <summary>
    /// Calculates priority score combining confidence and impact.
    /// </summary>
    public double PriorityScore => (ConfidenceLevel * 0.6) + (ExpectedImpact * 0.4);
}
